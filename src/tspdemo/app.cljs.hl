(ns tspdemo.app
  (:refer-hoplon :exclude  [center])
  (:require-macros
        [boot.boot-macros                 :refer  [get-env]]
        [tailrecursion.hoplon             :refer  [with-init!]]
        [tailrecursion.javelin            :refer  [defc defc= cell=]])
  (:require
        [hoplon.google.jsapi.maps         :as m :refer  [decode-path]]
        [hoplon.google.jsapi.loader       :as l :refer  [api-key]]
        [goog.string                      :as g]
        [goog.string.format               :as gf]
        [cljsjs.moment]
        [cljsjs.jquery-ui]
        [tailrecursion.javelin            :as j :refer  [cell]]
        [tailrecursion.hoplon             :as w :refer  [add-initfn!]]
        [tailrecursion.castra             :as c :refer  [mkremote]]))

(defn dissoc-in
    "Dissociates an entry from a nested associative structure returning a new
    nested structure. keys is a sequence of keys. Any empty maps that result
    will not be present in the new structure."
    [m  [k & ks :as keys]]
      (if ks
        (if-let  [nextmap  (get m k)]
          (let  [newmap  (dissoc-in nextmap ks)]
            (if  (seq newmap)
                (assoc m k newmap)
                (dissoc m k)))
          m)
        (dissoc m k)))

(def max-trucks 6)
(def meters-per-mile 1609.34)
(def depot-image  "icons/warehouse-2.png")
(def stop-image "icons/patisserie.png")
(def fmt-route-image "icons/%d/number_%d.png")
(def fmt-notify-image "icons/%d/symbol_excla.png")
(def colors ["#e02121" "#bf21de" "#1919cc" "#1be0d0" "#1bde28" "#dec41d"])
(reset! api-key "AIzaSyDGqkxjAuq4IeG7rUt6C33Jsiv41bkQfBk")  
(def log #(fn [x] (.log js/console % (clj->js x))))

(defc map-style 
  "[{\"featureType\":\"road\",\"elementType\":\"geometry\",\"stylers\":
  [{\"visibility\":\"simplified\"}]},{\"featureType\":\"road.arterial\",
  \"stylers\":[{\"hue\":149},{\"saturation\":-78},{\"lightness\":0}]},
  {\"featureType\":\"road.highway\",\"stylers\":
  [{\"hue\":-31},{\"saturation\":-40},{\"lightness\":2.8}]},
  {\"featureType\":\"poi\",\"elementType\":\"label\",\"stylers\":
  [{\"visibility\":\"off\"}]},{\"featureType\":\"landscape\",\"stylers\":
  [{\"hue\":163},{\"saturation\":-26},{\"lightness\":-1.1}]},
  {\"featureType\":\"transit\",\"stylers\":[{\"visibility\":\"off\"}]},
  {\"featureType\":\"water\",\"stylers\":
  [{\"hue\":3},{\"saturation\":-24.24},{\"lightness\":-38.57}]}]")

(defc castra-url          (get-env  "castra-url"))
(defc state            nil)
(defc error            nil)
(defc loading          nil)
(defc trucks           "1")
(defc capacity         "50")
(defc min-stops        6)
(defc route-lines      nil)
(defc solution         nil)
(defc solution-loading nil)
(defc selected-stops   [])
(defc selected-depot   nil)
(defc center           {:lat 25.763 :lon -80.331 })
(defc shift-start      (js/moment. "08:00" "HH:mm"))
(defc shift-end        (js/moment. "18:00" "HH:mm"))
(defc map-zoom         {:zoom 10})
(defc map-ctrl         {:mapTypeControl false :streetViewControl false})
(defc= map-styles      {:styles  (js->clj (.parse js/JSON map-style))})
(defc= map-opts        (into {} (filter #(not (nil? (val %))) (merge map-zoom map-ctrl map-styles))))

(declare markers meters->miles seconds->hms)
(defelem info  [{:keys  [title body pos idis idur]} _]
  (div 
    (strong title )
    (p body)
    (if pos
      (div 
        (div (str "Route Position: " pos))
        (div (str "Miles from route start: " (meters->miles idis)))
        (div (let [t  (.clone @shift-start)
                   t  (.add t (clj->js {:seconds idur}))] 
                   (str "Time of arrival: " (.format t "HH:mm a"))))))
     ))

(defc toggle-groups     {})
(defc time-windows      {})
(defn diff-in-seconds [e b]
  (let [b   (js/parseInt (.format b "X"))
        e   (js/parseInt (.format e "X"))]
    (- e b )))

(defc= constraints 
  (let [ss  (into #{} selected-stops)
        cs  (into {} (filter 
              #(contains? ss (key %)) 
              time-windows))]
    (into {} (map #(let 
                 [s  (:start (val %))
                  e  (:end (val %))
                  s  (if  s 
                          (js/moment. s  "HH:mm") 
                          (.clone shift-start))
                  e  (if  e 
                          (js/moment e  "HH:mm")  
                          (.clone shift-end))
                  si (diff-in-seconds s shift-start)
                  ei (diff-in-seconds e shift-start)]
      (assoc {} (key %) {:start si :end ei})) 
      cs))))

(defelem time-select [{:keys [start end interval noop]
                       :or {interval 30 start "08:00" end "18:00" noop "choose"}
                       :as attrs} _]
  (let [coll    (cell [])
        no      (option :value nil noop)
        opts    (cell= (cons no 
                             (map #(option :value (:value %) (:opt %)) coll)))
        i       {:minute interval}
        m     (js/moment. start "HH:mm")
        e     (js/moment. end "HH:mm")]
    (while 
              (not (.isAfter m e)) 
              (do 
                (swap! coll conj (assoc {} 
                                        :value (.format m "H:mm")
                                        :opt (.format m "h:mm a"))) 
                (.add m (clj->js i))))
    (select (dissoc attrs :start :end :interval :noop) opts)))

(defelem ui-toggle [{:keys [trigger hide effect options duration group] 
                     :or {duration 500 options {} hide? true}
                     :as attr} kids]
  (let [div-id      (str (gensym))
        elem-attrs  (dissoc attr :group :trigger :hide? :effect :options :duration)]
    (with-let [elem (div (assoc elem-attrs :id div-id) kids)]
      (when-dom elem
        (fn [] 
          (do 
            (if hide (.hide (js/jQuery elem)) (.show (js/jQuery elem)))
            (cell= (when (and group (not= ((keyword group) toggle-groups) elem))
              (.hide 
              (js/jQuery elem) 
              (clj->js effect) 
              (clj->js options) 
              duration)))
            (.click 
              (js/jQuery (str "#" trigger)) 
              #(do  
                (if (.is (js/jQuery elem) ":visible")
                  (do 
                    (when group
                      (swap! toggle-groups assoc (keyword group) nil))
                    (.hide  
                      (js/jQuery elem) 
                      (clj->js effect) 
                      (clj->js options) 
                      duration))
                  (do 
                    (when group
                      (swap! toggle-groups assoc (keyword group) elem))
                    (.show  
                      (js/jQuery elem)
                      (clj->js effect) 
                      (clj->js options) 
                      duration)))))))))))

(defc= routes           (mapv #(assoc %1 :color %2) (:routes solution) colors))
(defc= stops            (mapv #(let [c  (find constraints (:id %)) 
                                     s  (assoc % 
                                          :opts {:icon stop-image} 
                                          :lon (:lng %) 
                                          :info (info 
                                                  :id     (:id %)
                                                  :title  (:label %) 
                                                  :body   (:address %)))]
                                 (if (nil? c) s (assoc s :constraint (val c)))) 
                              (:stops state)))
(defc= depots           (mapv #(assoc % :opts {:icon depot-image} 
                                        :lon (:lng %) 
                                        :info (info 
                                                :id     (:id %)
                                                :title  (:label %) 
                                                :body   (:address %))) 
                              (:depots state)))
(defc= markers          
  (let [ss  (into #{} selected-stops)
        ms  (if solution
              (flatten 
                (map (fn [[i route]] 
                  (let [nodes (into [] (:stops route))
                        i     (inc i)
                        dis   (reductions + (-> route :intra :distance))
                        dus   (reductions + (-> route :intra :duration))
                        unmet (into #{} (map :id (:unmet route)))]
                    (map (fn [[cnt node] di du] 
                      (let [stop    (first (filter #(= node (:id %)) stops))
                            icon    (if (contains? unmet (:id stop)) 
                                      (g/format fmt-notify-image i)
                                      (g/format fmt-route-image i (inc cnt)))
                            info    (info
                                      :id (:id stop)
                                      :title (:label stop)
                                      :body  (:address stop)
                                      :pos   (inc cnt)
                                      :idis  di
                                      :idur  du)
                            stop    (assoc-in stop [:opts :icon] icon)]
                        (assoc stop :info info ))) 
                          (map-indexed vector nodes) dis dus ))) 
                  (map-indexed vector routes)))
              (into [] (filter #(contains? ss (:id %)) stops)))] 
    (conj ms  (first (filter #(= selected-depot (:id %)) depots)))))

(defc= polylines        (flatten (mapv (fn [route i color] 
                              (let [lines (:polylines route)
                                    opts  {:strokeWeight "2" :strokeColor color}] 
                                (map #(assoc {} :path (decode-path %) :opts opts) lines)))
                            (:routes solution) (range 1 (inc (count (:routes solution)))) colors)))

(defc rt-fn              nil)
(defc= ready?           (and (not (nil? selected-depot)) (> (count selected-stops) min-stops ) (empty? solution-loading) (nil? solution)))
(def ept-state          (mkremote 'castra.api/get-state state error loading @castra-url))
(def ept-route          (mkremote 'castra.api/get-routes solution error solution-loading @castra-url))
(def ept-test-cache     (mkremote 'castra.api/test-cache rt-fn error loading @castra-url))


;(cell= ((log "[castr]")  castra-url))
;(cell= ((log "[tg]")  toggle-groups))
;(cell= ((log "[cache]") (clj->js rt-fn)))
;(cell= ((log "[r]")  solution))
(cell= (if error ((log "[error]") (:trace error))))

(add-initfn! (fn [] (do (ept-state))))

(defn add-time-constraint! [id which constraint]
  (let [c  (if (= constraint "") nil constraint)]
    (if (nil? c)
      (swap! time-windows dissoc-in [id which])
      (swap! time-windows assoc-in [id which] c))))

(defn seconds->hms [seconds]
  (let [h   (quot seconds 3600)
        m   (quot (rem  seconds 3600) 60)
        s   (rem (rem seconds 3600) 60)]
    (g/format "%02d:%02d:%02d" h m s)))

(defn meters->miles [meters]
  (g/format "%.2f miles" (/ (js/parseInt meters) meters-per-mile)))

(defn route [e]
  (if @ready?
    (do
      (reset! error nil)
      (let [ls          (cell @stops)
            stops       (mapv 
                          (fn [x] (select-keys x [:id 
                                                  :address 
                                                  :label 
                                                  :constraint
                                                  :lat 
                                                  :lng])) 
                          (filter 
                            #(contains? (into #{} @selected-stops) (:id %)) 
                            @stops))
            d           (first (filter #(= @selected-depot (:id %)) @depots))
            depot       (select-keys d [:id :address :label :lat :lng])
            ;l           (.create  js/Ladda (.-currentTarget e))
            ps          {:stops stops 
                        :depot depot 
                        :trucks @trucks 
                        :constraints (when (seq @constraints) @constraints)
                        :capacity @capacity}
            prom        (ept-route ps)]
       ; (.start l)
       ; (.always prom #(.stop l))
       ))
    (js/alert "Not Ready")))


(defn toggle-stop! [id]
  (let [stop      (first (filter #(= id (:id %)) @stops))
        stops     (into #{} @selected-stops)
        n         ((if 
                     (contains? stops (:id stop)) 
                     disj 
                     conj) 
                   stops (:id stop))]
      (reset! selected-stops (vec n))))

(defn stop-selected? [id & stuff]
  (let [stop      (first (filter #(= id (:id %)) @stops))]
    (if (contains? (set @selected-stops) (:id stop)) "true" "false")))

(defn depot-selected? [id]
  (if (= id @selected-depot) true false))

(defn toggle-all-stops! []
  (let [ss    (if 
                (= (.attr (js/jQuery "#toggle-stops") "checked") "checked") 
                (mapv #(:id %) @stops) 
                [])]
    (reset! selected-stops ss)))

(defn select-depot! [id]
  (let [depot     (first (filter #(= id (:id %)) @depots))]
    (reset! selected-depot (:id depot))) )
