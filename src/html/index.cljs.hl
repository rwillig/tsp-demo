(page index.html
  (:refer-clojure :exclude [nth meta])
  (:require
    [tailrecursion.hoplon.util          :refer [nth name pluralize route-cell]]
    [tailrecursion.hoplon.storage-atom  :refer [local-storage]])
  (:require
    	[goog.string :as gstring]
      [goog.events :as events]
      [clojure.set :as set :refer [difference]]
      [tailrecursion.castra :refer [mkremote]]))

(comment (defn format
  "Formats a string using goog.string.format."
  [fmt & args]
  (apply gstring/format fmt args))

(defn printf
  "Prints formatted output, as per format"
  [fmt & args]
  (print (apply format fmt args))))

(def *map* nil)
(def meters-per-mile 1609.34)
(def max-stops 75)
(def max-depots 10)
(def max-lines 70)
(def depot-image  "icons/warehouse-2.png")
(def stop-image "icons/patisserie.png")
(def fmt-route-image "icons/%d/number_%d.png")
(def colors ["#e02121" "#bf21de" "#1919cc" "#1be0d0" "#1bde28" "#dec41d"])

(def log #(fn [x] (.log js/console % (clj->js x))))
(defn enable-button [id]
  (.removeAttr (js/jQuery (clj->js (str "#" id))) "disabled"))
(defn disable-button [id]
  (.attr (js/jQuery (clj->js (str "#" id))) "disabled" "true"))
(defn meters-to-miles [meters]
  (format "%.2f miles" (/ (js/parseInt meters) meters-per-mile)))

;;; cells
(defc state            nil)
(defc error            nil)
(defc loading          nil)
(defc trucks           "1")
(defc capacity         "50")
(defc depot-markers    '#{})
(defc stop-markers     '#{})
(defc route-lines      (mapv #(google.maps.Polyline.) (range max-lines)))
(defc solution         nil)
(defc solution-loading nil)
(defc selected-stops   #{})
(defc selected-depot   nil)

(defc= stops           (or (:stops state) (into #{} (mapv #(assoc {} :label %) (range max-stops)))))
(defc= depots          (or (:depots state) (into #{} (mapv #(assoc {} :label %) (range max-depots)))))
(defc= sorted-stops    (vec (sort-by :label stops)))
(defc= sorted-depots   (vec (sort-by :label depots)))

(def ept-state   (mkremote 'tspdemo.api.demo/get-state state error loading))
(def ept-route   (mkremote 'tspdemo.api.demo/get-routes solution error solution-loading))

(cell= (.log js/console (:trace error)))

(defn ready? [depot stops xhr]
  (and (not (nil? depot)) (> (count stops) 5) (or (nil? xhr) (empty? xhr))))

(def form-ready? (cell= (ready? selected-depot selected-stops solution-loading)))
(cell= ((log "[state]") stops))

(defn clear-lines []
  (mapv #(.setMap (clj->js %)) (clj->js nil)) @route-lines)
(defn decode-path [coded]
  (google.maps.geometry.encoding.decodePath coded))
(defn available-lines []
  (filter #(nil? (.getMap (clj->js %))) @route-lines))
(defn draw-line [path line color]
  (let [l (clj->js line)
        p (clj->js path)
        m (clj->js *map*)]
    (.setPath l p)
    (.setOptions l (clj->js {:strokeColor color}))
    (.setMap l m)))

(defn draw-lines [lines color]
  (mapv #(draw-line (decode-path %1) %2 color) lines (available-lines)))

(defn process-route [route n color]
  (let [nodes (rest (butlast (:route route)))
        ms (map (fn [x] (first (filter #(= x (:id %)) @stop-markers))) nodes)]
    (mapv #(let [m (:marker %1) i (format fmt-route-image n %2)] (.setIcon m i)) ms (range 1 (inc (count ms))))
    (.append (js/jQuery "#console") (str "<div style=\"color:" color  ";\">Trip Total: " (meters-to-miles (:trip route)) "</div>"))
    (draw-lines (:polylines route) color)))

(defn process-routes [s]
    (clear-lines)
    (.empty (js/jQuery "#console"))
    (.append (js/jQuery "#console") (str "<div>" (:time s) "</div>"))
    (mapv #(process-route %1 (inc %2) %3) (:routes s) (range (count (:routes s))) colors))

(cell= (process-routes solution))

(defn add-depot-marker! [marker id]
  (swap! depot-markers conj {:id id :marker marker}))

(defn add-stop-marker! [el]
  (let [m  (first (set/select #(= el (:id %)) @stop-markers))
        e  (first (filter #(= el (:id %)) @stops))]
    (if (nil? m)
      (let [markerOptions (clj->js {:position (google.maps.LatLng. (:lat e) (:lng e))
                                    :title (:label e)
                                    :icon stop-image
                                    :map *map*})
            marker (google.maps.Marker. markerOptions)]
        (swap! stop-markers conj {:id (:id e) :marker marker}))
      (do (.setIcon (:marker m) stop-image) (.setMap (:marker m) *map*)))))

(defn remove-stop-marker! [el]
  (let [m (first (set/select #(= el (:id %)) @stop-markers))]
    (if (not (nil? m))
      (.setMap (:marker m) (clj->js nil)))))

(defn watch-depot 
  [k r o n]
  (let [old-marker   (first (set/select #(= o (:id %)) @depot-markers))
        new-marker   (first (set/select #(= n (:id %)) @depot-markers))
        old-depot    (first (filter #(= o (:id %)) @depots))
        new-depot    (first (filter #(= n (:id %)) @depots))]
    (if (not (empty? old-marker)) (.setMap (:marker old-marker) (clj->js nil)))
    (if (empty? new-marker)
      (let [
            markerOptions (clj->js {:position (google.maps.LatLng. (:lat new-depot) (:lng new-depot))
                                    :title (:label new-depot)
                                    :icon depot-image
                                    :map *map*})
            marker (google.maps.Marker. markerOptions)]
        (add-depot-marker! marker (:id new-depot)))
      (.setMap (:marker new-marker)(clj->js *map*)))))

(defn watch-stops 
  [k r o n]
  (let [op (if (< (count o) (count n)) "added" "deleted")
        els (case op
             "added"   (difference (set n) (set o))
             "deleted" (difference (set o) (set n)))]
    (if (= op "added") 
      (mapv #(add-stop-marker! %) els) 
      (mapv #(remove-stop-marker! %) els))))


(add-watch selected-stops :stops watch-stops)
(add-watch selected-depot :depot watch-depot)
        
(defn select-stop! [id]
  (swap! selected-stops (fn [stops] ((if (contains? stops id) disj conj) stops id))))

(defn select-depot! [id]
  ((log "[depot]") id)
  (reset! selected-depot id))

(defn toggle-all [e]
  (let [all-stops (into #{} (map #(:id %) @stops))]
  (if (= (.attr (js/jQuery "#select-all") "checked") "checked")
    (reset! selected-stops all-stops)
    (reset! selected-stops #{}))))

(defn route [e]
  (let [s     (filter #(contains? @selected-stops (:id %)) @stops)
        d     (first (filter #(= @selected-depot (:id %)) @depots))
        ps    {:stops s :depot d :trucks @trucks :capacity @capacity}]    
    (do
      (.track js/mixpanel (clj->js "Do Route") (clj->js {:stops (count s) :trucks (js/parseInt @trucks) :capacity (js/parseInt @capacity)}))
      (ept-route ps))))

(defn initialize []
  (let [mapOptions (clj->js{"center" (google.maps.LatLng. 25.763 -80.331)
                    "zoom" 10
                    "mapTypeId"  google.maps.MapTypeId.ROADMAP})]
    (do 
      (set! *map* (google.maps.Map. (.getElementById js/document "map-canvas") mapOptions))
      (.getScript js/jQuery "chardinjs.min.js")
    	;(.chardinJs (js/jQuery "body") "start")
    	(ept-state)
    	(.track js/mixpanel (clj->js "View Map")))))
(events/listen js/window "load" initialize)

(defn guide [e]
  (.chardinJs (js/jQuery "body") "toggle"))
 
(html
  (head (title "TSP Demo")
        (link {:rel "stylesheet" :type "text/css" :href "style.css"})
        (link {:rel "stylesheet" :type "text/css" :href "chardinjs.css"})
        (script {:type "text/javascript" :src "https://maps.googleapis.com/maps/api/js?libraries=geometry&sensor=false"})
        (script {:type "text/javascript" :src "mixpanel.js"}))
  (body 
    (div {:id "main-container"}
     (div {:id "top-banner"} (span))
     (div {:id "map-canvas-wrapper"}
      (div {:id "map-canvas"})
      (div {:id "console" :data-intro "Look here for important messages about the routes" :data-position "top"}))
     
     (form {:on-submit [#(if @form-ready? (route %))]}
       (div {:id "list-wrapper"}
         (fieldset {:class "stops-list" :data-intro "The list of stops to choose. Pick at least 6" :data-position "left"}
          (legend "Stops")(div {:class "stops-inner"} 
		      (loop-tpl
          	:size max-stops
            :bindings [{:keys [id label addr]} stops]
	          (div
	            {:class "stop-container" :do-class [:hidden (not id)]}
	            (input {:class "checky" :type "checkbox" :do-value [(contains? selected-stops id)] :on-click [#(select-stop! @id)]})
	            (div {:class "address-container"}
                (div {:class "label" :do-text [label]})
		            (div {:class "address" :do-text [addr]})))
		        )))
        (fieldset {:class "depot-list" :data-intro "The starting point for all routes. Pick 1 only." :data-position "left"}
         (legend "Depots")(div {:class "depots-inner"}
		      (loop-tpl
          	:size max-depots
            :bindings [{:keys [id label addr]} depots]
	          (div
	            {:class "depot-container" :do-class [:hidden (not id)]}
	            (input {:class "checky" :type "radio" :name "depot" :do-value [(= selected-depot id)] :on-click [#(select-depot! @id)]})
            (div {:class "address-container"}
	            (div {:class "label" :do-text [label]})
	            (div {:class "address" :do-text [addr]}))))
		        ))
        (div {:class "buttons"}
          (div (span {:data-intro "Select all stops." :data-position "left"}(label "All Stops: ") (input {:type "checkbox" :class "checky" :id "select-all" :on-click [#(toggle-all %)]}))
            (span {:data-intro "How many trucks" :data-position "top"}(label "Trucks: ") 
            (select {:size  "1" :name "trucks" :id "trucks" :on-change [#(reset! trucks ~:trucks)]}
              (option {:value 1 :default true} "1")
              (option {:value 2} "2")
              (option {:value 3} "3")
              (option {:value 4} "4")
              (option {:value 5} "5")
              (option {:value 6} "6")))
            (span {:data-intro "Stops per truck" :data-position "top"} (label "Capacity: ") 
            (input {:type "range"  :id "capacity" :value @capacity :step "1" :min "6" :max @capacity :on-change [#(reset! capacity ~:capacity)]}) (span {:do-text [capacity]}))
            )
          (button {:type "button" :class "button" :id "route" :do-attr [:disabled (not form-ready?)] :on-click [#(do % (route %))]} "route"))))
     (div {:id "footer"} (a {:href "#" :class "guide" :on-click [#(do % (guide %))]} "How the heck does this thing work?") (a {:href "https://mixpanel.com/f/partner"} (img {:src "//cdn.mxpnl.com/site_media/images/partner/badge_blue.png" :alt "Mobile Analytics"})))
       )))
